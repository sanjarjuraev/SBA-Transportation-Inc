@use "sass:math";

@mixin background-content($repeat: no-repeat, $size: cover, $position: center center) {
	background-repeat: $repeat;
	background-size: $size;
	background-position: $position;
}

@mixin overlay($opacity: $opacity, $z-index: 0) {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	opacity: $opacity;
	z-index: $z-index;
}

@mixin equal-size($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin height-lh($height, $lineheight: $height) {
	height: $height;
	line-height: $lineheight;
}

@mixin equal-size-lineHeight($width, $height: $width, $Lheight: $width) {
	width: $width;
	height: $height;
	line-height: $Lheight;
}

@mixin flex-position($display, $contet, $items) {
	display: $display;
	justify-content: $contet;
	align-items: $items;
}

@mixin center-position($top: $top, $left: $top) {
	position: absolute;
	top: $top;
	left: $top;
	transform: translate(-#{$top}, -#{$top});
}

@mixin inputPlaceholder() {
	$selector: '';
	$prefixes: (moz: "::-moz",
			webkit: "::-webkit",
			ie: ":-ms"
		);

	@each $prop,
	$value in $prefixes {
		@if $prop !="moz" {
			$selector: #{$value}-input-placeholder;
		}

		@else {
			$selector: #{$value}-placeholder;
		}

		@if & {
			&#{$selector} {
				@content;
			}
		}

		@else {
			#{$selector} {
				@content;
			}
		}
	}

	&::placeholder {
		@content;
	}
}



// Mixin to place items on a circle
@mixin on-circle($item-count, $circle-size, $item-size, $rotCount: 0, $angleCount: 360) {


	>* {
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		width: $item-size;
		height: $item-size;
		line-height: $item-size;
		margin: -($item-size * 0.5);

		$angle: #{$angleCount / $item-count};
		$rot: $rotCount;

		@for $i from 1 through $item-count {
			&:nth-of-type(#{$i}) {
				transform:
					rotate($rot * 1deg) translate($circle-size * 0.5) rotate($rot * -1deg);
			}

			$rot: $rot+$angle;
		}
	}
}

// SCSS Mixin for Transition
@mixin transition($duration: 0.4s, $timing-function: ease, $delay: 0s) {
	transition: all $duration $timing-function $delay;
}

@mixin transition-properties($props...) {
	-webkit-transition: $props;
	-o-transition: $props;
	transition: $props;
}

@mixin transition-delay($itemcount: 1, $transitionCount: 0.0s) {
	$transition: $transitionCount;

	@for $i from 1 through $itemcount {
		&:nth-of-type(#{$i}) {
			transition-delay: ($transition + $transitionCount);
		}

		$transition: $transition+0.1s;
	}
}

// Responsive Query
@mixin hd {

	/* Hight Resoulation devices */
	@media (min-width: #{$hd + 1}) {
		@content;
	}
}

@mixin xxl {

	/* Extra large devices */
	@media (max-width: #{$xxl}) {
		@content;
	}
}

@mixin ml {

	/* Medium Large devices */
	@media (max-width: #{$ml}) {
		@content;
	}
}

@mixin xl {

	/* Medium Large devices */
	@media (max-width: #{$xl}) {
		@content;
	}
}

@mixin lg {

	/* Large devices */
	@media (max-width: #{$lg}) {
		@content;
	}
}

@mixin md {

	/* Medium devices */
	@media (max-width: #{$md}) {
		@content;
	}
}

@mixin sm {

	/* Small devices */
	@media (max-width: #{$sm}) {
		@content;
	}
}

@mixin xs {

	/* Extra small devices */
	@media (max-width: #{$xs}) {
		@content;
	}
}

@mixin vxs {

	/* Extra small devices */
	@media (max-width: #{$vxs}) {
		@content;
	}
}

@mixin rtl {

	/* rtl Support */
	[dir="rtl"] {
		@content;
	}
}

// Mixin for responsive breakpoints
@mixin mobile-s {
	@media (max-width: $mobile-s) {
		@content;
	}
}

@mixin mobile-m {
	@media (max-width: $mobile-m) {
		@content;
	}
}

@mixin mobile-l {
	@media (max-width: $mobile-l) {
		@content;
	}
}

@mixin mobile-xl {
	@media (max-width: $mobile-xl) {
		@content;
	}
}

@mixin tablet-s {
	@media (max-width: $tablet-s) {
		@content;
	}
}

@mixin tablet-m {
	@media (max-width: $tablet-m) {
		@content;
	}
}

@mixin tablet-l {
	@media (max-width: $tablet-l) {
		@content;
	}
}

@mixin laptop-s {
	@media (max-width: $laptop-s) {
		@content;
	}
}

@mixin laptop-m {
	@media (max-width: $laptop-m) {
		@content;
	}
}

@mixin laptop-l {
	@media (max-width: $laptop-l) {
		@content;
	}
}

@mixin nestHub {
	@media (min-width: #{ $md + 1}) and (max-width: #{ $laptop-m }) {
		@content;
	}
}

@mixin nestHubMax {
	@media (min-width: #{ $lg + 1}) and (max-width: #{ $laptop-l }) {
		@content;
	}
}


@mixin respond-between($min, $max) {
	@media (min-width: $min) and (max-width: $max) {
		@content;
	}
}



// Text Background Mixin With Extend
@mixin text-background($background, $text-color: transparent, $blend-mode: normal, $bg-size: auto) {
	background: $background;
	-webkit-background-clip: text;
	background-clip: text;
	color: $text-color;
	background-size: $bg-size;
	background-blend-mode: $blend-mode;
}

// Example:-
// .gradient-text {@include text-background(linear-gradient(90deg, #ff7e5f, #feb47b));}
// .pattern-text {@include text-background(url('pattern.png'), transparent, multiply);}
// .repeated-pattern-text {@include text-background(url('pattern.png'), transparent, normal, repeat);}
// .solid-color-text {@include text-background(#3498db, #3498db);}


/*Position*/
@mixin position($vertical, $horizontal) {
	position: absolute;
	#{$vertical}: 0;
	#{$horizontal}: 0;
	z-index: -1;
}

.p-top-left {
	@include position(top, left);
}

.p-top-right {
	@include position(top, right);
}

.p-bottom-left {
	@include position(bottom, left);
}

.p-bottom-right {
	@include position(bottom, right);
}

// Center Grid Mixin
@mixin center-grid {
	display: grid;
	place-items: center;
	place-content: center;
}

// Center Flex Mixin
@mixin center-flex {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
}

// Transparent Border Mixin
@mixin transparent-border($b-color, $border-width) {
	display: inline-block;
	position: relative;

	// Creates the text outline using text-shadow
	text-shadow: -#{$border-width} -#{$border-width} 0 $b-color,
	#{$border-width} -#{$border-width} 0 $b-color,
	-#{$border-width} #{$border-width} 0 $b-color,
	#{$border-width} #{$border-width} 0 $b-color;
}

// Define absolute mixin
@mixin absolute-content($width: 100%, $height: 100%, $background: none) {
	position: absolute;
	content: "";
	width: $width;
	height: $height;
	background: $background;
	transition: all 0.4s ease-in-out;
}

// Define Border mixin
@mixin border($side, $width, $style, $color) {
	position: relative;
	border-#{$side}: $width #{$style} #{$color} !important;
}

.border {
	@include border(bottom, 1px, solid, rgba(6, 50, 50, 0.102));
}

.border.white {
	@include border(bottom, 1px, solid, rgba(244, 248, 236, 0.102));
}